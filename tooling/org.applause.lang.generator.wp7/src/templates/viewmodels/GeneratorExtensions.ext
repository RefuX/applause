import org::eclipse::emf::ecore;
import org::applause::lang::applauseDsl;

extension extensions::MetamodelExtensions; 
extension extensions::GeneratorExtensions;

/**
 * ViewModel
 */
namespace(View this):
	rootNamespace() + ".ViewModel";
	
constructorName(View this):
	this.name.toFirstUpper() + ".ViewModel";
		
className(View this):
	this.name.toFirstUpper() + "ViewModel";
	
classFilename(String this):
	this + ".cs";
	
classFilename(View this):
	className().classFilename();
	
classFileFQN(View this):
	"ViewModel/" + classFilename();
	
contentProviderClassname(ViewCall this):
	this.provider.contentProviderClassname();
	
contentProviderClassname(ProviderConstruction this):
	"ERROR, should not occurr.";
	
contentProviderClassname(SimpleProviderConstruction this):
	this.expression.expression();
	
contentProviderClassname(ComplexProviderConstruction this):
	this.provider.name + "(" + this.argument.expression() + ")";
	
contentTypename(SectionedView this):
	this.content.description.typeName();
	
contentPropertyname(SectionedView this):
	this.content.description.type.name;
	
contentPropertyPropertyname(SectionedView this):
	this.contentPropertyname() + "PropertyName";
	
contentPropertyFieldname(SectionedView this):
	"_" + this.contentPropertyname().toFirstLower();
	
providerPayloadSlotname(ProviderConstruction this):
	this.typeDescription().type.name.toFirstLower();
	
providerTypename(ProviderConstruction this):
	this.typeDescription().typeName();
	
List[ViewCall] uniqueViewCalls(List[ViewCall] this):
	JAVA templates.viewmodels.Extensions.withoutConceptionalDuplicates(java.util.List);
	
// List[ViewCall] withoutConceptionalDuplicates(Object calls):
//	JAVA templates.Extensions2.withoutConceptionalDuplicates(java.util.List);
	