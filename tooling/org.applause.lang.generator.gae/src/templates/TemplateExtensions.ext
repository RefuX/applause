import org::eclipse::emf::ecore;
import org::applause::lang::applauseDsl;

extension templates::MetamodelExtensions;
extension templates::Extensions; 

viewCssClasses(View this):
	"";
	
viewCssClasses(TableView this):
	"table list";
		
viewCssClasses(DetailsView this):
	"details";
	
tplCellForLoop(SectionCell this):
	iterator == null 
		? ""
		: "{% for " + iterator.name + " in " + iterator.collection._collection_expression("data") +" %}\n";

private String _expression(CollectionExpression this, String target):
	"!_expression-" + this.metaType;
	
private String _expression(Expression this, String target):
	"!_expression-" + this.metaType;
	
private String _expression(ScalarExpression this, String target):
	"!_expression-" + this.metaType;

private String _expression(StringLiteral this, String target):
	"'" + value + "'";
	
private String _expression(StringReplace this, String target): // TODO
	"##replace" + target;
	
private String _expression(StringSplit this, String target): // TODO
	this.value._expression(target) + '|split:' + this.delimiter._expression(target); 
		
private String _expression(ObjectReference this, String target):
	{target}.addAll(toList().withoutFirst()).toString(".");
	
private String _collection_expression(Expression this, String target):
	_expression(target) + "|to_list";
	
private String _collection_expression(CollectionExpression this, String target):
	_expression(target) + "|to_list";
	
private String _collection_expression(ObjectReference this, String target):
	let path = {target}.addAll(toList().withoutFirst()).toList():
		path.size > 1
			? path.withoutLast().toString(".") + '|to_list:"' + path.last() + '"'
			: path.toString(".") + "|to_list"
	;

String expression(ScalarExpression this, String target):
	"!expression-" + this.metaType;
	
String expression(StringUrlConform this, String target):
	"{{" + this.value._expression(target) + "|urlencode}}";
		
expression(StringLiteral this, String target):
	value;
	
expression(StringConcat this, String target):
	values.expression(target).toString("");
		
String expression(VariableDeclaration this, String target):
	"!expression-" + this.metaType;
	
String expression(Constant this, String target):
	expression(value, target);		
	
String expression(ObjectReference this, String target):
	Constant.isInstance(object)
		? expression(object, target)
		: "{{" + _expression(target) + "|safe|linebreaksbr}}";
		
tplPrepareUrl(ViewAction this, String target, String var):
	"";
	
tplPreparedUrl(ViewAction this, String target, String var):
	target; // nothing prepared
	
private String urlConform(String value):
	value + "|urlencode";	
	
parameterValues(ProviderConstruction this, String target): "";

parameterValues(ComplexProviderConstruction this, String target):
	argument==null?"":argument._expression(target).urlConform();
	
parameterValues(SimpleProviderConstruction this, String target):
	resolver().resolversReference()._expression(target).urlConform();	
	
tplPrepareUrl(ViewCall this, String target, String var):	
	"{% url views." + defViewName() + " " + provider.parameterValues(target) + " as " + var + " %}";
	
tplPreparedUrl(ViewCall this, String target, String var):
	var;
	
tplUrl(ViewAction this, String var):
	"";
	
tplUrl(ViewCall this, String var):
	"{{ " + var + " }}";
	
tplUrl(ExternalOpen this, String var):
	this.url.expression(var);
	
cellContextVar(SectionCell this):
	iterator == null ? "data" : iterator.name; 	