import org::eclipse::emf::ecore;
import org::applause::lang::applauseDsl;

extension templates::MetamodelExtensions;

List[ViewCall] withoutConceptionalDuplicates(Object calls):
	JAVA templates.Extensions2.withoutConceptionalDuplicates(java.util.List);

List[ViewCall] uniqueViewCalls(Model this):
	viewCalls().toList().withoutConceptionalDuplicates();
	
uniqueViewCalls(Application this):
	uniqueViewCalls((Model)this.eContainer());

viewCalls(Model this):
	application.viewCalls().union(elements.viewCalls());
	
viewCalls(Application this):
	buttons.viewCalls().flatten();	

viewCalls(TabbarButton this):
	{view};
viewCalls(ModelElement this):
	{};
	
viewCalls(SectionedView this):
	this.sections.viewCalls().flatten();

viewCalls(ViewSection this):
	this.cells.viewCalls().flatten();
	
viewCalls(SectionCell this):
	ViewCall.isInstance(this.action)
		? {this.action}
		: {};

defProviderName(ViewCall this):
	this.provider.contentProvider().name;
	
defProviderParam(ViewCall this):
	let cp = provider.contentProvider():
		cp.resolver
			? cp.resolversReference().toList().last()
			: (cp.parameter!=null ? cp.parameter.name : "");
			
defViewParam(ViewCall this):
	defProviderParam(); 
		
defViewName(ViewCall this):
	this.view.name + this.provider.defViewNameSuffix(view);
	
defViewNameSuffix(ProviderConstruction this, View view):
	"By" + contentProvider().name.toFirstUpper();
		
urlPattern(ViewCall this):
	let cp = this.provider.contentProvider() :
		'^' + this.view.name + "/" + cp.name + (
			cp.parameter == null ? "" : "/(?P<" + defProviderParam() + ">.+?)"
		) + "/$";
		
viewTemplateFilename(ViewCall this):
	view.viewTemplateFilename();

viewTemplateFilename(View this):
	"generated/" + name + ".html";