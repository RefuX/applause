import org::eclipse::emf::ecore;
import de::itemis::mobilizer::appModelDsl;

List[ViewCall] withoutConceptionalDuplicates(Object calls):
	JAVA templates.gae.Extensions.withoutConceptionalDuplicates(java.util.List);

List[ViewCall] uniqueViewCalls(Model this):
	viewCalls().toList().withoutConceptionalDuplicates();
	
uniqueViewCalls(Application this):
	uniqueViewCalls((Model)this.eContainer());

viewCalls(Model this):
	application.viewCalls().union(elements.viewCalls());
	
viewCalls(Application this):
	buttons.viewCalls().flatten();	

viewCalls(TabbarButton this):
	{view};
viewCalls(ModelElement this):
	{};
	
viewCalls(SectionedView this):
	this.sections.viewCalls().flatten();

viewCalls(ViewSection this):
	this.cells.viewCalls().flatten();
	
viewCalls(SectionCell this):
	ViewCall.isInstance(this.action)
		? {this.action}
		: {};
		
defViewName(ViewCall this):
	this.view.name + this.provider.defViewNameSuffix(view);
	
defViewNameSuffix(ProviderConstruction this, View view):
	"By" + contentProvider().name.toFirstUpper();
	
defViewParam(ViewCall this):
	this.provider.contentProvider().defViewParam();	
	
defViewParam(ContentProvider this):
	parameter != null
		? parameter.name
		: "";

contentProvider(ProviderConstruction this):
	SimpleProviderConstruction.isInstance(this)
		? ((SimpleProviderConstruction)this).resolver()
		: ((ComplexProviderConstruction)this).provider;
		
ContentProvider resolver(SimpleProviderConstruction this):
	JAVA de.itemis.mobilizer.validation.AppModelDslJavaValidator.findResolver(de.itemis.mobilizer.appModelDsl.SimpleProviderConstruction);				
	
String expression(ScalarExpression this):
	"!expression-" + this.metaType;
	
expression(StringLiteral this):
	"'" + value + "'";
	
expression(StringUrlConform this):
	'quote(' + this.value.expression() + ')';
	
expression(StringConcat this):
	"'" + values.collect(e|"%s").toString("") + "' % ("
		+ values.expression().toString(", ") + ")";
		
String expression(VariableDeclaration this):
	"!expression-" + this.metaType;
	
String expression(Constant this):
	expression(value);		
	
String expression(ObjectReference this):
	Constant.isInstance(object)
		? expression(object)
		: this.object.name + (tail==null?"":tail.getterPath());

private String getterPath(ObjectReference this):
	"." + this.object.name + (tail==null?"":tail.getterPath());
