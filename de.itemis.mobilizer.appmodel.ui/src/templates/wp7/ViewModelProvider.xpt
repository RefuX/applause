«IMPORT de::itemis::mobilizer::appModelDsl»

«EXTENSION templates::MetamodelExtensions»
«EXTENSION templates::wp7::GeneratorExtensions»

«DEFINE main FOR Application-»
«EXPAND provider FOREACH this.providersWithImplementation()»
«ENDDEFINE»

«DEFINE provider FOR ContentProvider»
«FILE this.viewModelProviderFileName()-»
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.Net;
using System.Linq;
using System.Xml.Linq;

namespace «namespace()»
{
	public class «viewModelProviderClassName()»
	{
		«IF (this.parameter != null)»
		private «this.parameter.typeName()» «this.parameter.propertyFieldName()»;
		
		public «viewModelProviderClassName()»(«this.parameter.typeName()» «this.parameter.name»)
		{
			«this.parameter.propertyFieldName()» = «this.parameter.name»;
			this.«viewModelCollectionName()» = new ObservableCollection<«viewModelClassName()»>();
		}
		«ELSE»
		public «viewModelProviderClassName()»()
		{
			this.«viewModelCollectionName()» = new ObservableCollection<«viewModelClassName()»>();
		}
		«ENDIF»		
		
		public ObservableCollection<«viewModelClassName()»> «viewModelCollectionName()» { get; private set; }
		
		public bool IsDataLoaded
		{
			get;
			private set;
		}
		
		public void LoadData()
		{
			WebClient client = new WebClient();
			client.DownloadStringAsync(new Uri(«this.url.expression()»));
			client.DownloadStringCompleted += new DownloadStringCompletedEventHandler(client_DownloadStringCompleted);			
		}
		
		void client_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
		{
			if (e.Error == null)
			{
				ParseDataFromXml(e.Result);
				this.IsDataLoaded = true;
			}
		}

		void ParseDataFromXml(String source)
		{
			this.«viewModelClassName()»s.Clear();

			XDocument xdoc = XDocument.Parse(source);
			XNamespace dc ="http://purl.org/dc/elements/1.1/";
			List<«viewModelClassName()»> result = 
				(
					from item in xdoc.Descendants(«this.selection.expression()»)
					select new «viewModelClassName()»
					{
						«EXPAND propertyMappings FOR this.type-»
					}
				).ToList<«viewModelClassName()»>();
			result.ForEach(this.«viewModelCollectionName()».Add);
		}
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE propertyMappings FOR Type»
«ENDDEFINE»

«DEFINE propertyMappings FOR Entity-»
«EXPAND propertyMapping FOREACH this.properties-»
«ENDDEFINE»

«DEFINE propertyMapping FOR Property-»
	«IF this.name == "creator"-»
						«this.propertyName()» = item.Element(dc + "«this.name»").Value,
	«ELSE-»
						«this.propertyName()» = item.Element("«this.name»").Value,
	«ENDIF-»
«ENDDEFINE»